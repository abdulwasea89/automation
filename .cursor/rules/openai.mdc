---
description: 
globs: 
alwaysApply: true
---
---
description: Ultra-detailed Cursor ruleset for building and maintaining OpenAI Agents SDK projects
globs:
  - src/**/*.py
  - **/agents/**/*.py
  - **/tools/**/*.py
  - **/guardrails/**/*.py
  - **/runner/**/*.py
  - **/main.py
alwaysApply: true
---

# 🚀 OPENAI AGENTS SDK — DEEP INTEGRATION RULESET

## 📌 GENERAL PRINCIPLES

- Always use `openai.agents` abstractions: `RunnableAgent`, `Tool`, `Runner`, `Guardrail`, `Handoff`
- Structure projects for modularity: `agents/`, `tools/`, `guardrails/`, `runner/`
- Tools should be pure functions where possible and support async where needed
- Documentation and types must be present for all user-facing behaviors
- Avoid circular dependencies — split into submodules if needed

---

## 🧠 AGENT DEFINITION RULES

### ✅ Basic Format
Use `RunnableAgent` to define each agent:

```python
support_agent = RunnableAgent(
    name="support_agent",
    instructions="Assist users with technical issues and escalate if needed.",
    tools=[answer_tool, escalate_tool],
)
```

### 📋 Best Practices
- Keep `name` lowercase and snake_case
- Make `instructions`:
  - Clear and goal-oriented
  - Avoid vague words like “help” without context
- Define agents per domain: support, billing, scheduling, etc.
- Do NOT embed long logic inside agents — defer to tools

### 🔁 Maintain Separation of Concerns
- Agent = high-level reasoning + delegation
- Tool = atomic logic unit
- Guardrail = routing logic
- Runner = orchestrator

---

## 🛠️ TOOL DESIGN RULES

### ✅ Structure

```python
def calculate_discount(price: float, discount: float) -> float:
    """Calculates the final price after discount."""
    return price - (price * discount / 100)

discount_tool = Tool.from_function(
    name="calculate_discount",
    description="Calculates discounted price from original price and percent off.",
    func=calculate_discount,
)
```

### 📋 Tool Requirements
- Must include:
  - **Name**: descriptive and snake_case
  - **Description**: concise summary of what it does
  - **Typed function signature**
  - **Docstring** (used by LLMs for semantic context)
- Avoid:
  - Side effects unless clearly necessary
  - External API calls without error handling
  - Mutable shared state

### 📦 Async Tools
Use `async def` for tools interacting with:
- OpenAI API
- Web scraping
- Database or file I/O
- Network calls

---

## 🧱 GUARDRAILS & HANDOFF RULES

### ✅ Format

```python
finance_handoff = Guardrail(
    name="finance_handoff",
    trigger=lambda msg: "invoice" in msg.content.lower(),
    target=finance_agent,
)
```

### 📋 Guardrail Best Practices
- Always give `name`
- Keep `trigger` fast and efficient (avoid long parsing in lambda)
- Consider:
  - `re.search(...)` for patterns
  - `.lower()` for normalization
- Optionally include a context-transforming function if needed
- Return fallback or error if no guardrail is matched

---

## 🧹 RUNNER COMPOSITION RULES

### ✅ Example

```python
runner = Runner(
    agents=[support_agent, finance_agent],
    guardrails=[finance_handoff, escalation_guardrail],
)

await runner.run()
```

### 📋 Runner Guidelines
- List all active agents explicitly
- Include fallback guardrails
- Use `AssistantEventHandler` for logging/debugging if needed:
  ```python
  class MyHandler(AssistantEventHandler):
      def on_message(self, message):
          print("User:", message.content)
  ```

- Run inside an `async def main()`:
  ```python
  if __name__ == "__main__":
      import asyncio
      asyncio.run(main())
  ```

---

## 🧪 TESTING & DEBUGGING

### 🛋️ Tool Test Coverage
- Use `pytest` for unit testing each tool function
- Validate input/output with:
  - Type hints
  - Assertions
  - Negative tests

### 🔞 Logging
- Use standard logging module:
  ```python
  import logging
  logger = logging.getLogger(__name__)
  logger.setLevel(logging.DEBUG)
  ```

- Print all tool usage with `AssistantEventHandler`

### 🔁 Retry Logic
- For external API tools, use `tenacity`:
  ```python
  from tenacity import retry, wait_fixed, stop_after_attempt

  @retry(wait=wait_fixed(2), stop=stop_after_attempt(3))
  def tool_func(...): ...
  ```
---

## 🚀 DEPLOYMENT & SECURITY

- NEVER hardcode API keys — use `.env` + `os.getenv()`
- Add `.env` to `.gitignore`
- Example:
  ```python
  import os
  openai.api_key = os.getenv("OPENAI_API_KEY")
  ```

- Use `dotenv` to load keys in local/dev:
  ```bash
  pip install python-dotenv
  ```
  ```python
  from dotenv import load_dotenv
  load_dotenv()
  ```

---

## 📈 VERSIONING & COMPATIBILITY

- Keep OpenAI SDK updated: `pip install -U openai`
- Recommended version in `requirements.txt`:
  ```txt
  openai>=1.14.0
  tenacity
  anyio
  python-dotenv
  ```

- Pin versions for production deployment
- Use `pyproject.toml` for modern builds with Poetry or Hatch

---

## 📚 REFERENCE

- Official Docs: https://openai.github.io/openai-agents-python/
- GitHub Repo: https://github.com/openai/openai-agents-python
- API Reference: https://platform.openai.com/docs/

Keep Cursor rules updated with each SDK release.
