import os
import time
import hashlib

# Cache configuration from environment variables
CACHE_TTL = int(os.getenv("CACHE_TTL", "3600"))  # Convert to int, default 1 hour
RATE_LIMIT = int(os.getenv("RATE_LIMIT", "30"))  # Convert to int, default 30
RATE_PERIOD = int(os.getenv("RATE_PERIOD", "60"))  # Convert to int, default 60 seconds

# In-memory response cache
response_cache = {}

def generate_cache_key(text: str) -> str:
    """
    Generate a cache key for the given text to avoid regenerating responses.

    The text is normalized (lowercased, stripped, common greetings unified, punctuation removed)
    and then hashed using MD5 to produce a consistent cache key.
    """
    normalized = text.lower().strip()
    normalized = normalized.replace("hello", "hi").replace("hey", "hi")
    normalized = normalized.replace("?", "").replace("!", "")
    return hashlib.md5(normalized.encode()).hexdigest()

def get_cache_stats() -> dict:
    """
    Get cache statistics for monitoring.

    Removes expired cache entries and returns:
      - cache_size: number of valid (non-expired) cache entries
      - cache_keys: up to 10 cache keys currently in the cache
      - expired_cleaned: number of expired entries removed
    """
    current_time = time.time()
    expired_keys = []
    
    for k, v in response_cache.items():
        timestamp = v.get("timestamp", 0)
        # Ensure timestamp is a valid number
        if not isinstance(timestamp, (int, float)):
            expired_keys.append(k)
        elif current_time - timestamp > CACHE_TTL:
            expired_keys.append(k)
    
    # Remove expired entries
    for key in expired_keys:
        del response_cache[key]
    
    return {
        "cache_size": len(response_cache),
        "cache_keys": list(response_cache.keys())[:10],  # Show first 10 keys
        "expired_cleaned": len(expired_keys)
    }

def cache_response(key: str, response: dict):
    """
    Cache a response with the current timestamp.

    Args:
        key: The cache key (typically generated by generate_cache_key).
        response: The response data to cache.
    """
    response_cache[key] = {
        "response": response,
        "timestamp": time.time()
    }

def get_cached_response(key: str):
    """
    Retrieve a cached response if it exists and is not expired.

    Args:
        key: The cache key.

    Returns:
        The cached response if present and valid, otherwise None.
    """
    if key not in response_cache:
        return None

    cached_data = response_cache[key]
    
    # Ensure timestamp is a valid number
    timestamp = cached_data.get("timestamp", 0)
    if not isinstance(timestamp, (int, float)):
        # If timestamp is invalid, remove the cache entry and return None
        del response_cache[key]
        return None
    
    # Check if cache entry has expired
    if time.time() - timestamp > CACHE_TTL:
        del response_cache[key]
        return None

    return cached_data["response"]
